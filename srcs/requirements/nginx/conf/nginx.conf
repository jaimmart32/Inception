server
{
    # Configura el servidor para que escuche en el puerto 443 con SSL/TLS habilitado.
    listen  443 ssl;
    # Habilitar escucha para conexiones IPv6
    listen [::]:443 ssl;
    # Define el nombre del servidor (dominio) que NGINX utilizará para esta configuración.
    server_name jaimmart.42.fr www.jaimmart.42.fr;
    # Define el directorio raíz desde donde se servirán los archivos.
    root    /var/www/html;
    # Establece el archivo índice predeterminado para las solicitudes de directorios.
    index   index.php;


    # SSL Settings

    # Especifica la ruta al certificado SSL.
    ssl_certificate /etc/ssl/certs/jaimmart.42.fr.crt;
    # Especifica la ruta a la clave privada del certificado SSL.
    ssl_certificate_key /etc/ssl/private/jaimmart.42.fr.key;
    # Configura NGINX para que solo use TLSv1.2 y TLSv1.3, asegurando que se utilicen protocolos seguros.
    ssl_protocols   TLSv1.2 TLSv1.3;

    # Location Settings

    #  Inicia un bloque de configuración para la ubicación raíz (/), que define cómo manejar las solicitudes para la raíz del servidor.
    location /
    {
        # intenta servir archivos directamente desde el sistema de archivos. Si no encuentra el archivo solicitado, intenta servir el 
        # archivo index.php pasando cualquier argumento de la consulta ($is_args$args).
        try_files   $uri $uri/ index.php$is_args$args;
    }

    # Inicia un bloque de configuración para manejar las solicitudes a archivos PHP. El patrón ~ \.php$ indica que se aplicará a 
    # cualquier archivo que termine en .php.
    #location ~ \.php$
    #{
    #    # Intenta servir el archivo PHP solicitado y si no lo encuentra retorna error 404
    #    try_files   $uri =404;
    #    # Define que las solicitudes PHP deben ser manejadas por el servicio FastCGI en wordpress:9000. Aquí, wordpress debe ser el 
    #    # nombre del contenedor de WordPress en la red de Docker.
    #    fastcgi_pass    wordpress:9000;
    #    # Establece index.php como el archivo índice predeterminado para las solicitudes FastCGI.
    #    fastcgi_index   index.php;
    #    # Incluye un archivo de configuración estándar (fastcgi_params) que define parámetros adicionales para FastCGI.
    #    include fastcgi_params;
    #}
}

# La configuración de NGINX se organiza en bloques de configuración, cada uno de los cuales define diferentes aspectos del servidor.

# FastCGI es un protocolo para la interfaz entre un servidor web y programas externos que genera contenido dinámico. Es una versión 
# mejorada y más rápida del CGI (Common Gateway Interface). FastCGI mantiene procesos en ejecución en lugar de iniciar uno nuevo por 
# cada solicitud, lo cual mejora considerablemente el rendimiento. En el contexto de NGINX y PHP, FastCGI se utiliza para conectar 
# NGINX con un backend PHP-FPM (FastCGI Process Manager), que maneja las solicitudes PHP.

# SSL (Secure Sockets Layer) es un protocolo criptográfico diseñado para proporcionar seguridad en la comunicación a través de redes, 
# como Internet. SSL asegura que los datos transferidos entre un servidor y un cliente (por ejemplo, entre un navegador web y un servidor
# web) se mantengan privados e íntegros. Aunque SSL ha sido reemplazado por TLS (Transport Layer Security) en la mayoría de las aplicaciones 
# modernas, el término "SSL" todavía se utiliza ampliamente para referirse a estos protocolos de seguridad.

# Un certificado SSL es un archivo de datos que vincula una clave criptográfica a los detalles de una organización y su dominio web. Cuando se 
# instala en un servidor web, activa el protocolo HTTPS (HyperText Transfer Protocol Secure), que asegura la comunicación entre el servidor 
# y los navegadores.